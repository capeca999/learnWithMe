First of all, let's explain all the application flow of the commandBus:

WEB.XML
1- When we start the server, we have a web.xml that starts a listener that listens to the class, in this case AppBootstrap

APPBOOTSTRAP
2. AppBootstrap calls the method contextInitialized(...) that calls Container.config()

CONTAINER
3. Container.config() register instances the classes that we are going to inject (Because we are in Java8, if not we could have used reflections to get all the classes)
3.1 We create a InMemoryCommandBus instance in the Container class.
    InMemoryCommandBus is the command orchestrator Recieves(Command) Calls(CommandHandler)
We create that InMemoryCommandBus giving him all the CommandHandlers of the system

3.2 GetCommandHandler Searches all the registered handlers (Because it implements  CommandHandler<CreateDivisionTypeCommand>)
This method searches all objects registered in SimpleInjection
Filters only the methods that implements CommandHandler<?> and returns them

INMEMORYCOMMANDBUS

4. We map each handler to it's command
    We fill a Map<String, CommandHandler<?>> that says:
    !For the command CreateDivisionTypeCommand use this handler
    ?Find CommandClass() inspects the method using handler(...) of each handler and detects the command type that it uses
